// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using open_house_api_c_sharp.infra.data;

#nullable disable

namespace open_house_api_c_sharp.Migrations
{
    [DbContext(typeof(ConectionContext))]
    partial class ConectionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoriaFilme", b =>
                {
                    b.Property<Guid>("CategoriasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilmesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriasId", "FilmesId");

                    b.HasIndex("FilmesId");

                    b.ToTable("CategoriaFilme");
                });

            modelBuilder.Entity("open_house_api_c_sharp.modules.categoria.models.entity.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("open_house_api_c_sharp.modules.filme.models.entity.Filme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_lancamento");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Duracao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("duracao");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("imagem");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("filmes");
                });

            modelBuilder.Entity("CategoriaFilme", b =>
                {
                    b.HasOne("open_house_api_c_sharp.modules.categoria.models.entity.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("open_house_api_c_sharp.modules.filme.models.entity.Filme", null)
                        .WithMany()
                        .HasForeignKey("FilmesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
